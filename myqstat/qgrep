#!/usr/bin/env python

import argparse,time
import commands,os,pwd,sys,re
import gpbs

# ==============================================================================
# print version information and exit
# ==============================================================================

def printversion():
  print '''
Version 0.1, December 2015

- Initial version.
  '''
  sys.exit(0)

# ==============================================================================
# print help and exit
# ==============================================================================

def printhelp():
  print '''
NAME

  qgrep - filter lines from running jobs (by comparing to their names).

USAGE

  $ qgrep [-i] [-u STR] [-v]

DESCRIPTION

  Filter lines from running jobs (by comparing to their names).

OPTIONS

  -h, --help
    Print help and exit.

  --version
    Print version and exit.

  -i, --job-id
    Use job-id as matching pattern.

  -u, --user=STR
    Filter jobs for a specific user.

  -v, --invert-match
    Invert the sense of matching, to select non-matching lines.

EXAMPLE

  $ qexec -c "python %s" -i sim*.py
  $ ls sim*.py | qgrep -v

  The first line is an example to submit a number of jobs. To then list all
  files ``sim*.py`` that are no longer running, the ``qgrep -v`` command is
  used.

SEE ALSO

  gpbs - PBS-wrapper in Python

RELEASE

  Version 0.1, December 2015

COPYRIGHT

  T.W.J. de Geus -- tom@geus.me -- www.geus.me
  '''
  sys.exit(0)

# ==============================================================================
# parse command-line arguments
# ==============================================================================

# set options/arguments
opts = [\
  (('-h','--help'        ),dict(action='store_true')),
  (('-V','--version'     ),dict(action='store_true')),
  (('-v','--invert-match'),dict(action='store_true')),
  (('-i','--job-id'      ),dict(action='store_true')),
  (('-u','--user'        ),dict(nargs='*',type=str )),
]

# parse command-line arguments
# - create parser
parser = argparse.ArgumentParser(add_help=False)
for (arg,opt) in opts:
  if type(arg)==tuple: parser.add_argument(*arg,**opt)
  else               : parser.add_argument( arg,**opt)
# - execute parser / convert to "<dict>"
args = vars(parser.parse_args())
# - set defaults, other than assigned by parser
for key in ['user']:
  if args[key] is not None:
    if len(args[key])==0:
      args[key] = [pwd.getpwuid(os.getuid())[0]]
# - for filters that are specified but not as regular expressions: convert
for field in ['user']:
  if args[field] is not None:
    args[field] = [re.compile('^'+i+'$') for i in args[field]]

# if interactive mode (pipe-command): read input
if not sys.stdin.isatty(): lines = [i.strip() for i in sys.stdin.readlines()]
else                     : lines = []

# print help and exit
if args['help'   ]: printhelp()
if args['version']: printversion()

# ==============================================================================
# main program
# ==============================================================================

# get list with jobs
jobs = [job for job in gpbs.Read.myqstat()]

# apply filters
if args['user'] is not None:
  for name in args['user']:
    jobs = [job for job in jobs if re.match(name,job.owner)]

# convert to list of strings
if args['job_id']: patterns = [re.compile('^.*'+job.id  +'.*$') for job in jobs]
else             : patterns = [re.compile('^.*'+job.name+'.*$') for job in jobs]

# initiate match
match = [False for line in lines]

# check for match
for iline,line in enumerate(lines):
  for pattern in patterns:
    if re.match(pattern,line):
      match[iline] = True
      break

# optionally invert
if args['invert_match']:
  match = [not i for i in match]

# select/print lines based on match
print '\n'.join([line for line,test in zip(lines,match) if test])

sys.exit(0)

