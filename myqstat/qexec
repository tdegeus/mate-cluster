#!/usr/bin/env python

import argparse,time
import commands,os,pwd,sys,re
import gpbs

# ==============================================================================
# print version information and exit
# ==============================================================================

def printversion():
  print '''
Version 0.3, April 2016

  - Included verbose option
  - Updated from new version of gpbs

Version 0.2, December 2015

  - Bugfixes

Version 0.1

  - Initial version
  '''
  sys.exit(0)

# ==============================================================================
# print help and exit
# ==============================================================================

def printhelp():
  print '''
NAME

  qexec - write PBS-scripts and/or automatically submit a group of jobs

USAGE

  $ qexec [-c CMD] [-t] [-p PBSOPT] [-n MAX] [-q] [-i input] [-v]

DESCRIPTION

  Automatically submit a group of jobs. This function can:

  - submit a group of PBS-jobs by submitting the input PBS-files, or
  - submit as a batch of commands, by automatically generating PBS-files.

  NB: the job is always submitted from the folder in which the file (PBS-script
      or input-file substituted in the command) is stored.

      For example for "-i sim/test.pbs", the function executes

        $ cd sim; qsub test.pbs; cd ..

OPTIONS

  -h, --help
    Print help and exit.

  --version
    Print version and exit.


  -v, --verbose
    Verbose operations, ask for conformation.

  -w, --write
    Write the PBS-scripts, do not submit the jobs.
    Ignored options: "-f", "-n", "q", and "-p".

  -n, --max=N
    Maximum number of jobs to run in parallel.

  -q, --current-queue
    Only check the queue that of the jobs submitted by this script. By default
    all the user's jobs are taken into account.

  -i, --input=STR
    List with input (PBS-)files.

  -c, --command=STR
    Command to execute (e.g.: "python %s")

  -t, --temp
    Use temporary working directory on the compute-node.

  -p, --pbsopt=STR [STR]
    Command-line PBS-options. These options overwrite equivalent options
    specified in the PBS-script. Common options:

    "-l nodes=1:ppn=1"
    "-l nodes=1:ppn=1:intel"
    "-l pmem=3gb"
    "-l pvmem=3gb"

EXAMPLE 1 - run a batch of Python scripts

  $ qexec -n 72 -t -c "python %s" -i sim*/run.py

  Breakdown of the options:

    -i sim*/run.py
          uses the files "run.py" in all folders starting with "sim"

    -c "python %s"
          executes the command "python run.py", from each of the folders "sim*",
          the function automatically creates a PBS-script with this command

    -t
          use a PBS-script that uses a temporary working directory on the
          compute-node

    -n 72
          run maximum 72 jobs in parallel (NB: the script applies this maximum
          only to jobs submitted by this script, it does not check for other
          jobs that the user is running)

  Command executed by the script (for example):

    $ cd sim1                 # proceed to the first directory in "sim*"
    $ echo "..." > run.pbs    # create the PBS-script (see gpbs)
    $ qsub -N sim1 run.pbs    # submit the newly create PBS-script
    $ cd ..                   # return to the root (from which "qexec" is run)

    $ cd sim2                 # proceed to the next directory in "sim*"
    ...

EXAMPLE 2 - resume "EXAMPLE 1", without rerunning/resubmitting jobs

  $ qexec -n 72 -t -c "python %s" -i `ls config*/sim*/run.py | qfilter`
  $ qexec -n 72 -t -c "python %s" -i `printf "%s\n" config1/sim*/run.py config2/sim*/run.py | qfilter`

  Breakdown of the difference with respect to EXAMPLE 1:

    -i `ls config*/sim*/run.py | qfilter`
          lists all files "config*/sim*/run.py" and then filters this list with
          existing (or running) "config*/sim*/run.out". The "printf" command can
          be used to preserve the order of the arguments.

TIPS

  * Use the "nohup" command keep the script running also after the sessions
    (i.e. the terminal is closed). For example:

    $ nohup qexec -c "python %s" -i sim*/run.py > nohup.out &

SEE ALSO

  gpbs - PBS-wrapper in Python (includes the template PBS-scripts).

RELEASE

  Version 0.3, April 2016

COPYRIGHT

  T.W.J. de Geus -- tom@geus.me -- www.geus.me
  '''
  sys.exit(0)

# ==============================================================================
# parse command-line arguments
# ==============================================================================

# set options/arguments
opts = [\
  (('-h','--help'         ),dict(action='store_true'           )),
  ((     '--version'      ),dict(action='store_true'           )),
  (('-v','--verbose'      ),dict(action='store_true'           )),
  (('-w','--write'        ),dict(action='store_true'           )),
  (('-t','--temp'         ),dict(action='store_true'           )),
  (('-q','--current-queue'),dict(action='store_true'           )),
  (('-c','--command'      ),dict(nargs=1  ,type=str            )),
  (('-n','--max'          ),dict(nargs=1  ,type=int ,default=96)),
  (('-p','--pbsopt'       ),dict(nargs='*',type=str            )),
  (('-i','--input'        ),dict(nargs='+',type=str            )),
]

# parse command-line arguments
# - create parser
parser = argparse.ArgumentParser(add_help=False)
for (arg,opt) in opts:
  if type(arg)==tuple: parser.add_argument(*arg,**opt)
  else               : parser.add_argument( arg,**opt)
# - execute parser / convert to "<dict>"
args = vars(parser.parse_args())
# - convert to list
for key in ['pbsopt','input']:
  if type(args[key])!=list:
    if args[key] is not None:
      args[key] = [args[key]]
# - concatenate list to string
for key in ['pbsopt']:
  if args[key] is not None:
    args[key] = ' '.join(args[key])
# - convert from string
for key in ['command','max']:
  if type(args[key])==list:
    args[key] = args[key][0]

# check for conflicting commands
if args['write'] and args['command'] is None:
  print 'No command to write to the PBS-script'; sys.exit(1)

# print help and exit
if args['help'   ]: printhelp()
if args['version']: printversion()

# ==============================================================================
# main program
# ==============================================================================

# initiate
# --------

# initiate list of running jobs: updated with submitted/completed jobs
running = []

# read the amount of other jobs to take into account
user   = pwd.getpwuid(os.getuid())[0]
jobs   = [job for job in gpbs.Read.myqstat() if job.state in ['R','Q']]
nother = len([job for job in jobs if job.owner==user]) if not args['current_queue'] else 0

# loop to verbose/submit
# ----------------------

if args['verbose']: modes = ['verbose','submit']
else              : modes = [          'submit']

for mode in modes:

  for name in args['input']:

    # wait for space to open-up
    if not args['write'] and mode=='submit':

      while (len(running)+nother)>=args['max']:
        time.sleep(60)
        jobs    = [job for job in gpbs.Read.myqstat() if job.state in ['R','Q']]
        nother  = len([job for job in jobs if job.owner==user and int(job.id) not in running]) if not args['current_queue'] else 0
        jobs    = [int(job.id) for job in jobs]
        running = [job for job in running if job in jobs]

    # interpret file-input
    path     = os.path.dirname (os.path.abspath (name))
    base,ext = os.path.splitext(os.path.basename(name))

    # write PBS-script
    if args['command'] is not None:

      ext = '.pbs'

      if args['temp']: script = gpbs.script.heavyio(pbsopt=['-o '+base+'.out'],command=args['command']%os.path.basename(name))
      else           : script = gpbs.script.simple (pbsopt=['-o '+base+'.out'],command=args['command']%os.path.basename(name))

      if   mode=='verbose': print('touch '+path+'/'+base+ext+';'),
      elif mode=='submit' : open (         path+'/'+base+ext,'w').write(script)

    # submit jobs
    if not args['write']:

      info = {'path':path,'name':name,'base':base,'ext':ext,'pbsopt':args['pbsopt']}

      if args['pbsopt'] is None            : cmd = 'cd "{path:s}"; qsub -N "{name:s}" "{base:s}{ext:s}"'           .format(**info)
      elif re.match('-N .*',args['pbsopt']): cmd = 'cd "{path:s}"; qsub {pbsopt:s} "{base:s}{ext:s}"'              .format(**info)
      else                                 : cmd = 'cd "{path:s}"; qsub {pbsopt:s} -N "{name:s}" "{base:s}{ext:s}"'.format(**info)

      if   mode=='verbose': print(cmd);
      elif mode=='submit' : jid = commands.getoutput(cmd); running.append(int(jid.split('.')[0]))

  # ask for confirmation
  if mode=='verbose':
    if not gpbs.Print.confirm('\nProceed? (y/n)\n'): sys.exit(0)