#!/usr/bin/env python

import gpbs
import argparse
import os,pwd,sys,re

# ==============================================================================
# print help and exit
# ==============================================================================

def printhelp():

  print('''
NAME

  myqstat - display the formatted job or node information

USAGE

  $ myqstat [options]

DESCRIPTION

  Parse the most important job and compute-node information. By default, the
  number of columns and their width are adapted to information and the screen
  size. This, and the actual columns, can be customized using the options below.

  The following color coding is used:

    Selection [green]

    Warning [red]: please provide a better resource claim
    - Memory : the job is using a lot of memory, use "-l pmem=... -l pvmem=...".
    - Score<1: one or more processors is idle a large part of the time.
    - Score>1: more processors are used than that were claimed.

REGULAR EXPRESSIONS

  Use the Python regular expressions to filter the output. For example:

    $ myqstat -u tdegeus.*
    $ myqstat -u '([Ft])(.*)'

OPTIONS

  General
   -h --help                   print help
   -v --version                print version information

  Filter
   -u --owner         [opt(s)] owner (default `whoami`)
   -w --exclude-owner [opt(s)] owner (default `whoami`)
   -j --name          [arg(s)] job-name
   -i --id            [arg(s)] job-id
   -t --walltime      [arg(s)] walltime, e.g. ">10d"
   -m --memused       [arg(s)] memory, e.g. ">100mb"
   -n --host          [arg(s)] host, e.g. "10"

  Output format
   -c --columns       [arg]    specify columns explicitly        (see below)
   -a --add-col       [arg]    add    columns to   default list  (see below)
   -d --del-col       [arg]    remove columns from default list  (see below)
   -s --sort          [arg]    sort output along column(s)       (see below)
      --order         [arg]    sort output: Ascending or Descending
      --noheader               do not display header
      --nocolor                do not use color coding
      --ifs                    symbol to separate the columns (default: "  " )
      --trunc                  symbol to truncate information (default: "...")
      --long                   print all information (can be slow with -N)

 Summary modes
   -U --user-summary           summary per user
   -N --node-summary           summary per node (wrapper around pbsnodes)

  Output columns (default: -c ionhcmpstr)
   i   ID                      -
   o   Owner                   -
   n   Name                    -
   h   Host                    compute-node number
   c   CPUs                    CPU resources claimed
   m   Mem                     memory currently used by the job
   p   pmem                    requested memory
   s   S                       state (Q=queued, R=running, E=quiting)
   t   Time                    elapsed time since the job has started
   r   Score                   score: CPU-time / ( walltime * #CPUs )
   a   qsub                    submit arguments

  Output columns [--node-summary] (default: nstcfrmp)
   n   Node                    compute-node number
   s   State                   status (free,job-exclusive,offline,down)
   t   Type                    CPU-type (amd,intel)
   c   Ctot                    #CPUs
   f   Cfree                   #CPUs free
   r   Score                   load (~job score)
   m   Mtot                    physical memory present in the node
   p   Mem%                    ratio of memory used by jobs (>1 swapping, avoid)

  Output columns [--node-summary --long] (default: nstcfrmphxb)
   h   HDtot                   total amount of disk-space in the node
   x   HD%                     ratio of disk-space used (>1 jobs get killed)
   b   Network                 total network traffic

  Output columns [--user-summary] (default: ocmtr)
   o   Owner                   -
   c   CPUs                    total number of CPUs in use by the owner
   m   Mem                     total memory used by the owner
   t   Time                    total walltime of all owner's jobs
   r   Score                   average score of all owner's jobs

RELEASE

  Version 4.2, April 2016

COPYRIGHT

  T.W.J. de Geus -- tom@geus.me -- www.geus.me

ACKNOWLEDGEMENT

  J. Neggers
  ''')

  sys.exit(0)

# ==============================================================================
# print version and exit
# ==============================================================================

def printversion():

  import sys

  print('''
Version 4.2, April 2016

  - Moved more to the gpbs-module, to facilitate re-usability)

Version 4.1, April 2016

  - Updated to Python3 syntax (not tested for Python 3)
  ''')

  sys.exit(0)

# ==============================================================================
# main program
# ==============================================================================

if __name__=='__main__':

  # set options/arguments
  # ---------------------

  opts = [\
    (('-h','--help'         ),dict(action='store_true'             )),
    (('-v','--version'      ),dict(action='store_true'             )),
    (('-U','--user-summary' ),dict(action='store_true'             )),
    (('-N','--node-summary' ),dict(action='store_true'             )),
    ((     '--long'         ),dict(action='store_true'             )),
    ((     '--nocolor'      ),dict(action='store_true'             )),
    ((     '--noheader'     ),dict(action='store_true'             )),
    (('-u','--owner'        ),dict(nargs='*',type=str              )),
    (('-w','--exclude-owner'),dict(nargs='*',type=str              )),
    (('-j','--name'         ),dict(nargs='+',type=str              )),
    (('-n','--host'         ),dict(nargs='+',type=str              )),
    (('-i','--id'           ),dict(nargs='+',type=str              )),
    (('-t','--walltime'     ),dict(nargs='+',type=str              )),
    (('-m','--memused'      ),dict(nargs='+',type=str              )),
    (('-f','--full-status'  ),dict(nargs='+',type=str              )),
    (('-s','--sort'         ),dict(nargs=1  ,type=str              )),
    ((     '--order'        ),dict(nargs=1  ,type=str,default='a'  )),
    (('-c','--columns'      ),dict(nargs=1  ,type=str              )),
    (('-a','--add-col'      ),dict(nargs=1  ,type=str,             )),
    (('-d','--del-col'      ),dict(nargs=1  ,type=str,             )),
    ((     '--ifs'          ),dict(nargs=1  ,type=str,default='  ' )),
    ((     '--trunc'        ),dict(nargs=1  ,type=str,default='...')),
  ]

  # parse command-line arguments
  # ----------------------------

  # create argument parser
  parser = argparse.ArgumentParser(add_help=False)
  for (arg,opt) in opts:
    if type(arg)==tuple: parser.add_argument(*arg,**opt)
    else               : parser.add_argument( arg,**opt)
  # read arguments from command-line, convert to "<dict>"
  args = vars(parser.parse_args())

  # print help and exit
  if args['help'   ]: printhelp()
  if args['version']: printversion()

  # additional checking and defaults
  # --------------------------------

  # change format: list -> str
  for key in ['columns','order','add_col','del_col','sort','ifs','trunc']:
    if type(args[key])==list:
      args[key] = args[key][0]

  # set defaults, other than assigned by parser
  for key in ['owner','exclude_owner']:
    if args[key] is not None:
      if len(args[key])==0:
        args[key] = [pwd.getpwuid(os.getuid())[0]]

  # set exclusive options
  excl = [\
    ('user_summary','node_summary'),\
    ('columns'     ,'add_col'     ),\
    ('columns'     ,'del_col'     ),\
  ]
  # check exclusive options
  msg = '"--{0}" and "--{1}" options are exclusive, consult "myqstat --help"'
  for opt in excl:
    if len([True for i in opt if args[i]])>1:
      raise parser.error(msg.format(*[i.replace('_','-') for i in opt]))

  # read output / print
  if   args['full_status' ]: print(gpbs.Print.myqstat_f(*args['full_status']))
  elif args['user_summary']: gpbs.Print.myqstat_user(**args)
  elif args['node_summary']: gpbs.Print.myqstat_node(**args)
  else                     : gpbs.Print.myqstat(**args)





