#!/usr/bin/env python
'''
This function provides a parser for the ``qstat -f``, ``pbsnodes``, and
``ganglia`` commands. Using the default settings the most essential information
about jobs and nodes is shown, but the input-options also allow for a high
degree of customization.

.. note::

  To run ``myqstat`` on a local system, during debugging, run the command as
  follows:

  .. code-block:: bash

    $ myqstat --debug

  This will avoid the commands, but reads the information from local text-files.
  These text-files have to be in the same folder as the ``myqstat`` command,
  and are created as follows:

  .. code-block:: bash

    $ qstat -f > qstat.log
    $ pbsnodes > pbsnodes.log
    $ ganglia disk_total disk_free bytes_in bytes_out cpu_idle > ganglia.log


:copyright:

  | T.W.J. de Geus
  | http://www.geus.me
  | tom@geus.me
'''

import gpbs

# ==============================================================================
# support function: read the terminal size
# ==============================================================================

def getTerminalSize():
  """
Get the size of the terminal.

:returns:

  lines (``<int>``)
    Number of lines in the terminal.

  columns (``<int>``)
    Number of columns in the terminal.

:source:

  `Online forum <http://www.codingtiger.com/questions/linux/
  How-to-get-console-window-width-in-python.html>`_
    """
  import os, struct
  def ioctl_GWINSZ(fd):
    import fcntl, termios
    return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
  # try stdin, stdout, stderr
  for fd in (0, 1, 2):
    try:
      return ioctl_GWINSZ(fd)
    except:
      pass
  # try os.ctermid()
  try:
    fd = os.open(os.ctermid(), os.O_RDONLY)
    try:
      return ioctl_GWINSZ(fd)
    finally:
      os.close(fd)
  except:
    pass
  # try `stty size`
  try:
    return tuple(int(x) for x in os.popen("stty size", "r").read().split())
  except:
    pass
  # try environment variables
  try:
    return tuple(int(os.getenv(var)) for var in ("LINES", "COLUMNS"))
  except:
    pass
  # i give up. return default.
  return (25, 80)

# ==============================================================================
# get column width
# ==============================================================================

def column_width(rows,columns,ifs,fit_screen=True):
  r'''
Calculate the column width based on the content and the window size.

:arguments:

  **rows** (``<list>``)
    The rows with data. This data is referenced to as ``<dict>``. Usually the
    data is of the ``<gpbs.Job>``, ``<gpbs.Node>``, or ``<gpbs.Owner>``-class.

  **columns** (``(<dict>,<dict>,...)``)
    List with print settings. Each column has the print settings in a dictionary
    with the following fields:

    * ``'key'`` : name of the field,
    * ``'wmin'``: minimum width (otherwise exclude),
    * ``'rel'`` : relative importance of the column,

    This function creates the ``'width'``.

  **ifs** (``<str>``)
    Separator used to separate the column.

:options:

  **fit_screen** ([``True``] | ``False``)
    If set to ``True`` the column width (and the number of columns) is modified
    such that the output fits the screen.

:returns:

  **columns** (``(<dict>,<dict>,...)``)
    List with print settings. The ``'width'`` is added.
  '''

  # calculate field size
  # --------------------

  # list columns to include
  include = []

  # calculate the (maximum) width of the header and the body for each column
  for icol,column in enumerate(columns):
    # header
    column['whead'] = len(column['head'])
    # body (the rows with data)
    wmax = 0
    emax = 0
    for row in rows:
      wmax = max(wmax,len(row[column['key']]        ))
      emax = max(emax,len(row[column['key']].strip()))
    # set column with as maximum of the header/body
    column['wmax' ] = max(wmax,column['whead'])
    column['width'] = max(wmax,column['whead'])
    # check if information is present
    if emax:
      include.append(icol)

  # remove empty columns
  columns = [column for col,column in enumerate(columns) if col in include]

  # return if nothing has to be done
  if not fit_screen:
    return columns

  # check if all columns can be included
  # ------------------------------------

  # get the width needed to print all columns
  wtot = sum([column['width'] for column in columns])+(len(columns)-1)*len(ifs)
  # get the width of the current window
  wwin = getTerminalSize()[1]
  # if no truncation is needed: skip truncation (equiv. to long output)
  if ( wtot<wwin ):
    return columns

  # remove columns if needed
  # ------------------------

  # set selection list, based on importance of the column
  cols = {column['rel']:i for i,column in enumerate(columns)}
  cols = [cols[i] for i in sorted(cols)]

  # leave room for truncation
  wmax = wwin
  # continue adding columns with the minimum width until the screen is filled
  wtot    = 0
  include = []
  for col in cols:
    if ( columns[col]['wmin'] < (wmax-wtot-len(ifs)) ):
      columns[col]['width'] = columns[col]['wmin']
      include.append(col)
      wtot += columns[col]['width']+len(ifs)

  # delete fields that are no longer included, and update the list of fields
  # in order of importance
  if len(include)!=len(cols):
    columns = [column for col,column in enumerate(columns) if col in include]

  # extend each of the columns as far as needed, maximum to the screen width
  # ------------------------------------------------------------------------

  # set selection list, based on importance of the column
  cols = {column['rel']:i for i,column in enumerate(columns)}
  cols = [cols[i] for i in sorted(cols)]

  # extend to columns to fill the view
  for col in cols:
    # check the total length
    wtot = sum([column['width'] for column in columns])+(len(columns)-1)*len(ifs)
    if wtot>=wwin:
      break
    # extend the column
    columns[col]['width'] = min(columns[col]['wmax'],(columns[col]['width']+wwin-wtot))

  # return final column selection
  return columns

# ==============================================================================
# command-line interaction
# ==============================================================================

class Main(object):
  '''
Class to run the command-line argument parser and print the output as set by
the defaults/options.
  '''

  # ----------------------------------------------------------------------------
  # main program
  # ----------------------------------------------------------------------------

  def __init__(self):

    import argparse
    import os,pwd,sys,re

    # set options/arguments
    # ---------------------

    opts = [\
      (('-h','--help'        ),dict(action='store_true'              )),
      (('-v','--version'     ),dict(action='store_true'              )),
      (('-u','--user'        ),dict(nargs='*',type=str               )),
      (('-j','--jobname'     ),dict(nargs='+',type=str               )),
      (('-n','--node'        ),dict(nargs='+',type=str               )),
      (('-i','--id'          ),dict(nargs='+',type=str               )),
      (('-t','--time'        ),dict(nargs='+',type=str               )),
      (('-m','--memory'      ),dict(nargs='+',type=str               )),
      (('-s','--sort'        ),dict(nargs='+',type=str               )),
      ((     '--order'       ),dict(nargs=1  ,type=str,default='a'   )),
      (('-c','--columns'     ),dict(nargs=1  ,type=str               )),
      (('-a','--add-col'     ),dict(nargs=1  ,type=str,dest='addcol' )),
      (('-d','--del-col'     ),dict(nargs=1  ,type=str,dest='delcol' )),
      ((     '--ifs'         ),dict(nargs=1  ,type=str,default='  '  )),
      ((     '--trunc'       ),dict(nargs=1  ,type=str,default='...' )),
      ((     '--noheader'    ),dict(action='store_true'              )),
      (('-U','--user-summary'),dict(action='store_true'              )),
      (('-N','--node-summary'),dict(action='store_true'              )),
      ((     '--long'        ),dict(action='store_true'              )),
      ((     '--debug'       ),dict(action='store_true'              )),
      ((     '--nocolor'     ),dict(action='store_true'              )),
    ]

    # parse command-line arguments
    # ----------------------------

    # create argument parser
    parser = argparse.ArgumentParser(add_help=False)
    for (arg,opt) in opts:
      if type(arg)==tuple:
        parser.add_argument(*arg,**opt)
      else:
        parser.add_argument(arg,**opt)
    # read arguments from command-line, convert to "<dict>"
    args = vars(parser.parse_args())

    # print help and exit
    if args['help']:
      self.help()
    if args['version']:
      self.version()

    # additional checking and defaults
    # --------------------------------

    # change format: list -> str
    for key in ['columns','order','addcol','delcol']:
      if args[key] is not None:
        args[key] = args[key][0]
    for key in ['ifs','trunc']:
      if type(args[key])==list:
        args[key] = args[key][0]
    # change format: str -> list (e.g. "io" -> ["i","o"]
    if args['sort'] is not None:
      if len(args['sort'])==1:
        args['sort'] = list(args['sort'][0])

    # set exclusive options
    excl = [\
      ('user_summary','node_summary'),\
    ]
    # check exclusive options
    msg = '"--%s" and "--%s" options are exclusive, consult "myqstat --help"'
    for opt in excl:
      if len([True for i in opt if args[i]])>1:
        raise parser.error(msg%tuple([i.replace('_','-') for i in opt]))

    # set defaults, other than assigned by parser
    if args['user'] is not None:
      if len(args['user'])==0:
        args['user'] = [pwd.getpwuid(os.getuid())[0]]

    # for filters that are specified but not as regular expressions: convert
    for field in ['user','jobname','id']:
      if args[field] is not None:
        args[field] = [re.compile(i) for i in args[field]]

    # store the command-line arguments
    for key in args:
      setattr(self,key,args[key])

    # select the mode in which to print the output
    mode = 'qstat'
    if args['user_summary']: mode = 'user'
    if args['node_summary']: mode = 'node'
    # print the output in one of the differnt modes
    if mode=='qstat':
      self.myqstat()
    elif mode=='user':
      self.myqstat_user()
    elif mode=='node':
      self.myqstat_node()

  # ----------------------------------------------------------------------------
  # print myqstat
  # ----------------------------------------------------------------------------

  def myqstat(self):
    '''
Print the output for the ``myqstat`` command.
    '''

    # define column settings, based on alias [options: -s/-c]
    columns = {}
    columns['i'] = dict(key='id'         ,head='ID'      ,wmin= 6,rel= 0)
    columns['o'] = dict(key='owner'      ,head='Owner'   ,wmin= 7,rel= 2)
    columns['u'] = dict(key='owner'      ,head='Owner'   ,wmin= 7,rel= 2)
    columns['n'] = dict(key='name'       ,head='Job name',wmin=11,rel= 9)
    columns['h'] = dict(key='host'       ,head='Host'    ,wmin= 2,rel= 3)
    columns['c'] = dict(key='resnode'    ,head='CPUs'    ,wmin= 6,rel= 5)
    columns['p'] = dict(key='pmem'       ,head='pmem'    ,wmin= 5,rel= 8)
    columns['m'] = dict(key='memused'    ,head='Mem'     ,wmin= 5,rel= 4)
    columns['s'] = dict(key='state'      ,head='S'       ,wmin= 1,rel= 1)
    columns['t'] = dict(key='walltime'   ,head='Time'    ,wmin= 4,rel= 6)
    columns['r'] = dict(key='score'      ,head='Score'   ,wmin= 4,rel= 7)
    columns['a'] = dict(key='submit_args',head='qsub -N' ,wmin=11,rel=10)

    # read jobs
    jobs = gpbs.myqstat(
      qstat = open('qstat.log','r').read() if self.debug else None,
    )

    # set list with command-line argument aliases [options: -u/-j/-i/-n/-t]
    alias = {}
    alias['user'   ] = 'o'
    alias['jobname'] = 'n'
    alias['id'     ] = 'i'
    alias['node'   ] = 'h'
    alias['time'   ] = 't'
    alias['memory' ] = 'm'
    # reduce the list of jobs by applying the different filters
    for name in ['user','jobname','id','time','node','memory']:
      # proceed with filter only if the filter is specified
      if getattr(self,name) is not None:
        # set color
        columns[alias[name]]['color'] = 'selection'
        # initiate to include or not
        incl = [False for i in jobs]
        # loop over jobs
        for (ijob,job) in enumerate(jobs):
          if name in ['user','jobname','id']:
            incl[ijob] = any([i.match(job[columns[alias[name]]['key']])   for i in getattr(self,name)])
          else:
            incl[ijob] = any([getattr(job,columns[alias[name]]['key'])==i for i in getattr(self,name)])
        # select jobs
        jobs = [job for job,i in zip(jobs,incl) if i]

    # apply sort to the list of jobs
    if self.sort:
      for s in self.sort:
        jobs = sorted(jobs,key=lambda job: getattr(job,columns[s]['key']))

    # convert the order of jobs
    if self.order!='a':
      jobs = [job for job in jobs[-1::-1]]

    # set default column list
    col = ['i','o','n','h','c','m','p','s','t','r']
    # add/remove/overwrite column list
    if self.addcol:
      col += [c for c in self.addcol]
    if self.delcol:
      rm   = [c for c in self.delcol]
      col  = [c for c in col if c not in rm]
    if self.columns:
      col  = [c for c in self.columns]

    # select columns -> convert to list
    columns = [columns[c] for c in col]

    # calculate column width
    columns = column_width(jobs,columns,ifs=self.ifs,fit_screen=not self.long)

    # set the colors
    if self.nocolor:
      color = gpbs.ColorNone
    else:
      color = gpbs.ColorDefault

    if len(jobs)>0:
      # print header
      if not self.noheader:
        print jobs[0].print_header(columns,line='=',ifs=self.ifs,trunc=self.trunc).format(color=color)
      # print jobs
      for job in jobs:
        print job.print_column(columns,ifs=self.ifs,trunc=self.trunc).format(color=color)

  # ----------------------------------------------------------------------------
  # print myqstat -N
  # ----------------------------------------------------------------------------

  def myqstat_node(self):
    '''
Print the output for the ``myqstat -N`` command.
    '''

    # define column settings, based on alias [options: -s/-c]
    columns = {}
    columns['n'] = dict(key='node'       ,head='Node'   ,wmin=4,rel= 0)
    columns['s'] = dict(key='state'      ,head='State'  ,wmin=6,rel= 1)
    columns['t'] = dict(key='ctype'      ,head='Type'   ,wmin=5,rel= 2)
    columns['c'] = dict(key='ncpu'       ,head='Ctot'   ,wmin=4,rel= 3)
    columns['f'] = dict(key='cpufree'    ,head='Cfree'  ,wmin=5,rel= 4)
    columns['m'] = dict(key='memp'       ,head='Mtot'   ,wmin=5,rel= 5)
    columns['w'] = dict(key='memu'       ,head='Mused'  ,wmin=6,rel= 6)
    columns['p'] = dict(key='relmemu'    ,head='Mem%'   ,wmin=5,rel= 7)
    columns['r'] = dict(key='score'      ,head='Score'  ,wmin=4,rel= 8)
    columns['h'] = dict(key='disk_total' ,head='HDtot'  ,wmin=6,rel= 9)
    columns['e'] = dict(key='disk_used'  ,head='HDused' ,wmin=6,rel=10)
    columns['x'] = dict(key='reldisku'   ,head='HD%'    ,wmin=5,rel=11)
    columns['b'] = dict(key='bytes_tot'  ,head='Network',wmin=7,rel=12)

    # read node information
    nodes = gpbs.myqstat_node(
      pbsnodes = open('pbsnodes.log','r').read() if self.debug else None     ,
      ganglia  = open('ganglia.log' ,'r').read() if self.debug else self.long,
    )

    # apply sort to the (remaining) list of nodes
    if self.sort is None:
      self.sort = ['n']
    for s in self.sort:
      nodes = sorted(nodes,key=lambda node: getattr(node,columns[s]['key']))

    # convert the order of nodes
    if self.order!='a':
      nodes = [node for node in nodes[-1::-1]]

    # set default column list
    col = ['n','s','t','c','f','r','m','p']
    if self.long:
      col += ['h','x','b']
    # add/remove/overwrite column list
    if self.addcol:
      col += [c for c in self.addcol]
    if self.delcol:
      rm   = [c for c in self.delcol]
      col  = [c for c in col if c not in rm]
    if self.columns:
      col  = [c for c in self.columns]

    # select columns -> convert to list
    columns = [columns[c] for c in col]

    # calculate column width
    columns = column_width(nodes,columns,ifs=self.ifs,fit_screen=not self.long)

    # set the colors
    if self.nocolor:
      color = gpbs.ColorNone
    else:
      color = gpbs.ColorDefault

    if len(nodes)>0:
      # print header
      if not self.noheader:
        print nodes[0].print_header(columns,line='=',ifs=self.ifs,trunc=self.trunc).format(color=color)
      # print nodes
      for job in nodes:
        print job.print_column(columns,ifs=self.ifs,trunc=self.trunc).format(color=color)

    # summary
    # -------

    # total number of CPUs
    total   = [str(sum([node.ncpu for node in nodes]))]
    fmt     = '%'+str(len(total[0]))+'d'
    cfmt    = fmt+' %s'
    # list CPU-types
    ctypes  = list(set([node.ctype for node in nodes]))
    # offline/online/working/free CPUs
    offline = [fmt%sum([node.ncpu              for node in nodes if node.state not in ['free','job-exclusive']])]
    online  = [fmt%sum([node.ncpu              for node in nodes if node.state     in ['free','job-exclusive']])]
    working = [fmt%sum([node.ncpu-node.cpufree for node in nodes if node.state     in ['free','job-exclusive']])]
    free    = [fmt%sum([node.cpufree           for node in nodes if node.state     in ['free','job-exclusive']])]

    # if more than one CPU-type is present: differentiate between CPU-types
    if len(ctypes)>1:
      for ctype in ctypes:
        total   += [cfmt%(sum([node.ncpu              for node in nodes if node.ctype==ctype                                               ]),ctype)]
        offline += [cfmt%(sum([node.ncpu              for node in nodes if node.ctype==ctype and node.state not in ['free','job-exclusive']]),ctype)]
        online  += [cfmt%(sum([node.ncpu              for node in nodes if node.ctype==ctype and node.state     in ['free','job-exclusive']]),ctype)]
        working += [cfmt%(sum([node.ncpu-node.cpufree for node in nodes if node.ctype==ctype and node.state     in ['free','job-exclusive']]),ctype)]
        free    += [cfmt%(sum([node.cpufree           for node in nodes if node.ctype==ctype and node.state     in ['free','job-exclusive']]),ctype)]

    # convert to text
    total   = 'number of CPUs total    : '+total  [0]+(' ( '+' / '.join(total  [1:])+' )' if len(total  )>1 else '')
    offline = 'number of CPUs offline  : '+offline[0]+(' ( '+' / '.join(offline[1:])+' )' if len(offline)>1 else '')
    online  = 'number of CPUs online   : '+online [0]+(' ( '+' / '.join(online [1:])+' )' if len(online )>1 else '')
    working = 'number of CPUs working  : '+working[0]+(' ( '+' / '.join(working[1:])+' )' if len(working)>1 else '')
    free    = 'number of CPUs free     : '+free   [0]+(' ( '+' / '.join(free   [1:])+' )' if len(free   )>1 else '')

    # print
    print '-'*len(total)
    print total
    print offline
    print online
    print working
    print free

  # ----------------------------------------------------------------------------
  # print myqstat -U
  # ----------------------------------------------------------------------------

  def myqstat_user(self):
    '''
Print the output for the ``myqstat -U`` command.
    '''

    # define column settings, based on alias [options: -s/-c]
    columns = {}
    columns['o'] = dict(key='owner'      ,head='owner'   ,wmin= 7,rel= 0)
    columns['u'] = dict(key='owner'      ,head='owner'   ,wmin= 7,rel= 0)
    columns['c'] = dict(key='cpus'       ,head='cpus'    ,wmin= 3,rel= 1)
    columns['m'] = dict(key='memused'    ,head='mem'     ,wmin= 5,rel= 2)
    columns['t'] = dict(key='walltime'   ,head='time'    ,wmin= 5,rel= 3)
    columns['r'] = dict(key='score'      ,head='score'   ,wmin= 4,rel= 7)

    # read node information
    owners = gpbs.myqstat_user(
      qstat = open('qstat.log','r').read() if self.debug else None,
    )

    # apply sort to the (remaining) list of nodes
    if self.sort is None:
      self.sort = ['c']
    for s in self.sort:
      owners = sorted(owners,key=lambda owner: getattr(owner,columns[s]['key']))

    # convert the order of owner
    if self.order!='a':
      owners = [owner for owner in owners[-1::-1]]

    # set default column list
    col = ['o','c','m','t','r']
    # add/remove/overwrite column list
    if self.addcol:
      col += [c for c in self.addcol]
    if self.delcol:
      rm   = [c for c in self.delcol]
      col  = [c for c in col if c not in rm]
    if self.columns:
      col  = [c for c in self.columns]

    # select columns -> convert to list
    columns = [columns[c] for c in col]

    # calculate column width
    columns = column_width(owners,columns,ifs=self.ifs,fit_screen=not self.long)

    # set the colors
    if self.nocolor:
      color = gpbs.ColorNone
    else:
      color = gpbs.ColorDefault

    if len(owners)>0:
      # print header
      if not self.noheader:
        print owners[0].print_header(columns,line='=',ifs=self.ifs,trunc=self.trunc).format(color=color)
      # print owners
      for owner in owners:
        print owner.print_column(columns,ifs=self.ifs,trunc=self.trunc).format(color=color)

  # ----------------------------------------------------------------------------
  # print help and exit
  # ----------------------------------------------------------------------------

  def help(self):

    import sys

    print '''
NAME

  myqstat - display the formatted job or node information

USAGE

  $ myqstat [options]

DESCRIPTION

  Parse the most important job and compute-node information. By default, the
  number of columns and their width are adapted to the screen size and the
  information itself. This, and the actual columns, can be customized using the
  options below.

  The following color coding is used:

    %sSelection%s

    %sWarning: please provide a better resource claim%s
    - Memory: use "-l pmem=... -l pvmem=..." as the job is using a lot of
              memory.
    - Score : one or more processors is idle a large part of the time (score<1),
              or more processors are used than that were claimed (score>1):
              check parallelization.

    Use the --nocolor option to get output without color-coding.

OPTIONS

  General options
   -h --help          print help
   -v --version       print version number

  Filter options
   -u --user    [opt] user filter (default `whoami`)
   -j --jobname [arg] job-name filter
   -i --id      [arg] job-id filter
   -t --time    [arg] walltime filter, e.g. ">10d"
   -m --memory  [arg] memory filter, e.g. ">100mb"
   -n --node    [arg] host filter, e.g. "10"

  Ouput options
   -c --columns [arg] specify output columns explicitly (see below)
   -a --add-col [arg] add columns at the end of the default list
   -d --del-col [arg] remove columns from default list
   -s --sort    [arg] sort the output along a certain column (see below)
      --order   [arg] sort the output (a)scending or (d)escending
   -o --output  [arg] output style: (s)hort, (l)ong, (c)omputer readable
      --noheader      do not display header
      --nocolor       do not use color coding
      --ifs           set symbol to separate the columns (default: " ")
      --trunc         set symbol to truncate information (default: "...")

 Summary options
   -U --user-summary  summary per user
   -N --node-summary  summary per node (wrapper around pbsnodes)
      --long          additional node information (slow, as it scans nodes)

  Output columns (default: -c ionhcmpstr)
   i   id             -
   o   owner          -
   n   job name       -
   h   host           compute-node number
   c   cpus           CPU resources claimed
   m   mem            memory currently used by the job
   p   pmem           requested memory
   s   S              state (Q=queued, R=running, E=quiting)
   t   time           walltime (elapsed time since the job has started)
   r   score          score: CPU-time / ( walltime * #CPUs )
   a   submit_args    submit arguments

  Output columns [--node-summary] (default: nstcfrmp)
   n   node           compute-node number
   s   state          status (free,job-exclusive,offline,down)
   t   type           CPU-type (amd,intel)
   c   Ctot           #CPUs
   u   Cused          #CPUs in use by jobs
   f   Cfree          #CPUs free
   l   score          load (~job score)
   m   Mtot           physical memory present in the node
   w   Mused          memory currently used by jobs
   r   Mrel           ratio of memory used by jobs (>1: swapping, avoid!)

  Output columns [--node-summary --long] (default: nstcfrmphxb)
   h   HDtot          total amount of disk-space in the node
   e   HDused         amount of disk-space currently used
   x   HDratio        ratio of disk-space used by jobs (>1 jobs get killed)
   b   Network        total network traffic

  Output columns [--user-summary] (default: ocmtr)
   o   owner          -
   c   cpus           total number of CPUs in use by the owner
   a   amd            total number of AMDs in use by the owner
   i   intel          total number of Intels in use by the owner
   m   mem            total memory used by the owner
   t   time           total walltime of all owner's jobs
   s   score          average score of all owner's jobs

RELEASE

  Version 4.0, April 2015

COPYRIGHT

  T.W.J. de Geus

ACKNOWLEDGEMENT

  J. Neggers
    ''' % (
      gpbs.ColorDefault.selection   , gpbs.ColorDefault.end ,
      gpbs.ColorDefault.warning     , gpbs.ColorDefault.end ,
    )

    sys.exit(0)

# ==============================================================================
# version information
# ==============================================================================

  def version(self):

    import sys

    print 'Version 4.0, April 2015'

    sys.exit(0)


# ==============================================================================
# main program
# ==============================================================================

if __name__=='__main__':
  Main()



