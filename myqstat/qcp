#!/usr/bin/env python

import argparse,time
import commands,os,pwd,sys,re
import gpbs

# ==============================================================================
# print version information and exit
# ==============================================================================

def printversion():
  print '''
Version 0.1, December 2015

- Initial version.
  '''
  sys.exit(0)

# ==============================================================================
# print help and exit
# ==============================================================================

def printhelp():
  print '''
NAME

  qcp - copy data from the compute-node

USAGE

  $ qcp [-n NAME] [-i ID] [-s STATE] [-v]

DESCRIPTION

  Copy the data from the compute-node, for one job or a group of jobs.

OPTIONS

  -h, --help
    Print help and exit.

  --version
    Print version and exit.

  -v, --verbose
    Verbose job selection, ask for conformation.

  -n, --name=STR
    Filter by name*.

  -i, --id=STR
    Filter by job-id*.

  -s, --state=STR
    Filter by state, e.g. 'Q', or 'R'.

REGULAR EXPRESSIONS (*)

  Several options are filtered using regular expressions. Thereby, the Python
  format has to be used. For example::

    $ qcp --name="dir.*file.ext"

SEE ALSO

  gpbs - PBS-wrapper in Python

RELEASE

  Version 0.1, December 2015

COPYRIGHT

  T.W.J. de Geus -- tom@geus.me -- www.geus.me
  '''

  sys.exit(0)

# ==============================================================================
# parse command-line arguments
# ==============================================================================

# set options/arguments
opts = [\
  (('-h','--help'   ),dict(action='store_true')),
  ((     '--version'),dict(action='store_true')),
  (('-v','--verbose'),dict(action='store_true')),
  (('-n','--name'   ),dict(nargs='+',type=str )),
  (('-s','--state'  ),dict(nargs='+',type=str )),
  (('-i','--id'     ),dict(nargs='+',type=str )),
]

# parse command-line arguments
# - create parser
parser = argparse.ArgumentParser(add_help=False)
for (arg,opt) in opts:
  if type(arg)==tuple: parser.add_argument(*arg,**opt)
  else               : parser.add_argument( arg,**opt)
# - execute parser / convert to "<dict>"
args = vars(parser.parse_args())

# print help and exit
if args['help'   ]: printhelp()
if args['version']: printversion()

# ==============================================================================
# main program
# ==============================================================================

# select the jobs
# ---------------

# read all of the user's jobs
user = pwd.getpwuid(os.getuid())[0]
jobs = [job for job in gpbs.Read.myqstat() if job.owner==user]

# filter the jobs by: id, name, state
if args['id'   ] is not None: jobs = [[job for job in jobs if re.match(item,job.id        )] for item in args['id'   ]]; jobs = [job for sub in jobs for job in sub]
if args['name' ] is not None: jobs = [[job for job in jobs if re.match(item,job.name      )] for item in args['name' ]]; jobs = [job for sub in jobs for job in sub]
if args['state'] is not None: jobs = [[job for job in jobs if re.match(item,job.state,re.I)] for item in args['state']]; jobs = [job for sub in jobs for job in sub]

# optionally ask for confirmation
# -------------------------------

if args['verbose']:

  gpbs.Print.myqstat(jobs,nocolor=True)

  if not gpbs.Print.confirm('\nCopy information from these jobs? (y/n)\n'): sys.exit(0)

# copy
# ----

for job in jobs:

  print commands.getoutput("scp -r {node:s}:{temp:s}/* {dest:s}/".format(
    node = 'compute-0-'+str(job.host),
    temp = gpbs.script.tempdir.format(user=user,jobid=job.id),
    dest = os.path.dirname(job.output_path),
  ))
