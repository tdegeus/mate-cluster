#!/usr/bin/env python

import argparse,time
import commands,os,pwd,sys,re
import gpbs

# ==============================================================================

def version():
  print '''
Version 0.1
  '''
  sys.exit(0)


def help():
  print '''
NAME

  qcp - copy data from the compute-node

USAGE

  $ qcp [-n NAME] [-i ID]

DESCRIPTION

  Copy the data from the compute-node, for one job or a group of jobs.

OPTIONS

  -h, --help
    Print help

  --version
    Print version

  -v, --verbose
    Verbose operations, ask for conformation.

SEE ALSO

  gpbs - PBS-wrapper in Python

RELEASE

  Version 0.1, December 2015

COPYRIGHT

  T.W.J. de Geus
  '''

  sys.exit(0)

# ==============================================================================

# ------------------------------------------------------------------------------
# prompt user configuration
# ------------------------------------------------------------------------------

def confirm(prompt):
  '''
Prompt the user for confirmation.

:arguments:

  **prompt** (``<str>``)
    Message to prompt the user.

:return:

  **response** (``True`` | ``False``)
    The user's answer.
  '''

  prompt = '%s\ny/n?\n'%prompt

  while True:

    user = raw_input(prompt)

    if not user:
      print 'please enter y or n.'
      continue

    if user not in ['y', 'Y', 'n', 'N']:
      print 'please enter y or n.'
      continue

    if user == 'y' or user == 'Y':
      return True

    if user == 'n' or user == 'N':
      return False

# ------------------------------------------------------------------------------
# parse command-line arguments
# ------------------------------------------------------------------------------

# set options/arguments
opts = [\
  (('-h','--help'   ),dict(action='store_true'             )),
  ((     '--version'),dict(action='store_true'             )),
  (('-n','--name'   ),dict(nargs='+',type=str              )),
  (('-s','--state'  ),dict(nargs='+',type=str              )),
  (('-i','--id'     ),dict(nargs='+',type=str              )),
]

# parse command-line arguments
# - create parser
parser = argparse.ArgumentParser(add_help=False)
for (arg,opt) in opts:
  if type(arg)==tuple:
    parser.add_argument(*arg,**opt)
  else:
    parser.add_argument(arg,**opt)
# - execute parser / convert to "<dict>"
args = vars(parser.parse_args())
# - convert to string
for key in ['name','id']:
  if type(args[key])==list:
    args[key] = [re.compile('^'+item+'$') for item in args[key]]
for key in ['state']:
  if type(args[key])==list:
    args[key] = [re.compile('^'+item.upper()+'$') for item in args[key]]

# print help and exit
if args['help']:
  help()
if args['version']:
  version()

# ------------------------------------------------------------------------------
# main program
# ------------------------------------------------------------------------------

# select the jobs
# ---------------

# read all of the user's jobs
user = pwd.getpwuid(os.getuid())[0]
jobs = [job for job in gpbs.read_qstat() if job.owner==user]

# filter the jobs by: id, name, state
if args['id'   ] is not None: jobs =[[job for job in jobs if re.match(item,job.id   )] for item in args['id'   ]]; jobs = [job for sub in jobs for job in sub]
if args['name' ] is not None: jobs =[[job for job in jobs if re.match(item,job.name )] for item in args['name' ]]; jobs = [job for sub in jobs for job in sub]
if args['state'] is not None: jobs =[[job for job in jobs if re.match(item,job.state)] for item in args['state']]; jobs = [job for sub in jobs for job in sub]

# optionally ask for confirmation
# -------------------------------

# if args['verbose']:
#   # calculate width of the columns to align
#   keys = ['id','owner','name']
#   N    = [0 for key in keys]
#   for ikey,key in enumerate(keys):
#     for job in jobs:
#       N[ikey] = max(N[ikey],len(str(getattr(job,key))))
#   fmt  = '{id:%ds} {owner:%ds} {name:%ds}'%tuple(N)
#   # create message
#   message = 'Delete the following jobs?\n'+'\n'.join([fmt.format(**vars(job)) for job in jobs])
#   if not confirm(message):
#     sys.exit(0)

for job in jobs:

  # select destination
  dest = os.path.dirname(job.output_path)

  # create command
  print commands.getoutput("scp -r {node:s}:{temp:s}/* {dest:s}/".format(
    node = 'compute-0-'+str(job.host),
    temp = gpbs.script.tempdir.format(user=user,jobid=job.id),
    dest = dest,
  ))
