#!/usr/bin/env python

import argparse,time
import commands,os,pwd,sys,re
import gpbs

# ==============================================================================
# print version information and exit
# ==============================================================================

def printversion():
  print '''
Version 0.2, April 2016

  - Used gpbs.Print.myqstat to print
  - Updated for new version of gpbs

Version 0.1

  - Initial version
  '''
  sys.exit(0)

# ==============================================================================
# print help and exit
# ==============================================================================

def printhelp():
  print '''
NAME

  qdelall - delete a group of PBS-jobs

USAGE

  $ qdelall [-n NAME] [-i ID] [-s STATE] [-t] [-v] [-c]

DESCRIPTION

  Delete a group of PBS-jobs (or all of the user's jobs).

OPTIONS

  -h, --help
    Print help and exit.

  --version
    Print version and exit.

  -v, --verbose
    Verbose job selection, ask for conformation.

  -n, --name=STR
    Filter by name*.

  -i, --id=STR
    Filter by job-id*.

  -s, --state=STR
    Filter by state, e.g. 'Q', or 'R'.

  -t, --tempdir
    Remove temporary working directory. This makes an assumption about the
    directory name, see gpbs.

  -c, --copy=DIR
    Copy the data from the temporary directory before deleting the job (and
    removing it, if the option "-t" is also used). If no directory is specified
    the directory of the output-file is used as destination.

REGULAR EXPRESSIONS (*)

  Several options are filtered using regular expressions. Thereby, the Python
  format has to be used. For example:

    $ qcp --name="dir.*file.ext"

SEE ALSO

  gpbs - PBS-wrapper in Python

RELEASE

  Version 0.2, April 2016

FEATURES REQUESTED

  - Copy the files from the compute-node back to the head-node [experimental].
  - Make verbose more explicit: explicitly list the commands.

COPYRIGHT

  T.W.J. de Geus -- tom@geus.me -- www.geus.me
  '''

  sys.exit(0)

# ==============================================================================
# parse command-line arguments
# ==============================================================================

# set options/arguments
opts = [\
  (('-h','--help'   ),dict(action='store_true'             )),
  ((     '--version'),dict(action='store_true'             )),
  (('-t','--tempdir'),dict(action='store_true'             )),
  (('-v','--verbose'),dict(action='store_true'             )),
  (('-c','--copy'   ),dict(nargs='?',type=str,default=False)),
  (('-n','--name'   ),dict(nargs='+',type=str              )),
  (('-s','--state'  ),dict(nargs='+',type=str              )),
  (('-i','--id'     ),dict(nargs='+',type=str              )),
]

# parse command-line arguments
# - create parser
parser = argparse.ArgumentParser(add_help=False)
for (arg,opt) in opts:
  if type(arg)==tuple: parser.add_argument(*arg,**opt)
  else               : parser.add_argument( arg,**opt)
# - execute parser / convert to "<dict>"
args = vars(parser.parse_args())

# print help and exit
if args['help'   ]: printhelp()
if args['version']: printversion()

# ==============================================================================
# main program
# ==============================================================================

# select the jobs
# ---------------

# read all of the user's jobs
user = pwd.getpwuid(os.getuid())[0]
jobs = [job for job in gpbs.Read.myqstat() if job.owner==user]

# filter the jobs by: id, name, state
if args['id'   ] is not None: jobs = [[job for job in jobs if re.match(item,job.id        )] for item in args['id'   ]]; jobs = [job for sub in jobs for job in sub]
if args['name' ] is not None: jobs = [[job for job in jobs if re.match(item,job.name      )] for item in args['name' ]]; jobs = [job for sub in jobs for job in sub]
if args['state'] is not None: jobs = [[job for job in jobs if re.match(item,job.state,re.I)] for item in args['state']]; jobs = [job for sub in jobs for job in sub]

# optionally ask for confirmation
# -------------------------------

if args['verbose']:

  gpbs.Print.myqstat(jobs,nocolor=True)

  if not gpbs.Print.confirm('\nDelete these jobs? (y/n)\n'): sys.exit(0)

# delete the jobs
# ---------------

# split queued and not-queued jobs
queued = [job.id for job in jobs if job.state=='Q']
jobs   = [job    for job in jobs if job.state!='Q']

# delete queued jobs at once
commands.getoutput('qdel '+' '.join(queued))

# delete jobs
for job in jobs:

  # delete job
  commands.getoutput('qdel '+job.id)

  # copy the data from the temporary working directory
  if args['copy']!=False and re.match('[0-9]+',str(job.host)):

    if   type(args['copy'])==str    : dest = args['copy']
    elif job.output_path is not None: dest = os.path.dirname(job.output_path)
    else                            : print '--copy: unknown destination'; sys.exit(1)

    commands.getoutput("scp -r {node:s}:{temp:s}/* {dest:s}/".format(
      node = 'compute-0-'+str(job.host),
      temp = gpbs.script.tempdir.format(user=user,jobid=job.id),
      dest = dest,
    ))

  # remove temporary working directory
  if args['tempdir'] and re.match('[0-9]+',str(job.host)):

    commands.getoutput("ssh {node:s} 'rm -r {temp:s}'".format(
      node = 'compute-0-'+str(job.host),
      temp = gpbs.script.tempdir.format(user=user,jobid=job.id),
    ))